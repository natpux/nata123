#Задание №3 Реализовать на свободную темы все концепции ООП, соединенные единым смыслом.

class Gruppa_222:

#    def _init_(self,age,gorod,profesia):
#        self.age:int =age
#        self.gorod:str =gorod
#        self.profesia:str =profesia
#        print("я учу python")


    @classmethod
    def OOP(cls):
       print("Изучаю информацию по ООП")

    def UK(cls):
        print("Пытаюсь понять декораторы")

    def UK1(cls):
        print("Впитываю n-e количество новых терминов")

    def UK2(cls):
        print("C точки зрения банальной эрудиции каждый индивидуум, критически мотивирующий абстракцию,"
              "не может игнорировать критерии утопического субъективизма, концептуально интерпретируя общепринятые"
              " дефанизирующие поляризаторы, поэтому консенсус, достигнутый диалектической материальной классификацией "
              "всеобщих мотиваций в парадогматических связях предикатов, решает проблему усовершенствования формирующих "
              "геотрансплантационных квазипузлистатов всех кинетически коррелирующих аспектов. Исходя из этого, мы пришли к выводу,"
              " что каждый произвольно выбранный объект PYTONA предикативно абсорбирующий  рациональной мистической индукциИ"
              "и можно дискретно детерминировать с аппликацией ситуационной парадигмы коммуникативно-функционального типа при"
              " наличии детекторно-архаического дистрибутивного образа в Гилбертовом конвергеционном пространстве, однако при"
              " параллельном колаборационном анализе спектрографических множеств, изоморфно релятивных к мультиполосным гиперболическим"
              " параболоидам, интерпретирующим антропоцентрический многочлен Нео-Лагранжа, возникает позиционный сигнификатизм гентильно"
              "й теории психоанализа, в результате чего надо принять во внимание следующее: поскольку не только эзотерический, но и "
              "экзистенциальный апперцепционный энтрополог антецедентно пассивизированный высокоматериальной субстанцией, обладает"
              " призматической идиосинхрацией, но так как валентностный фактор отрицателен, то и, соответственно, антагонистический "
              "дискредитизм деградирует в эксгибиционном направлении, поскольку, находясь в препубертатном состоянии, практически "
              "каждый субъект, меланхолически осознавая эмбриональную клаустрофобию, может экстраполировать любой процесс интеграции и"
              " дифференциации в обоих направлениях, отсюда следует, что в результате синхронизации, ограниченной минимально допустимой"
              " интерполяцией образа, все методы конвергенционной концепции требуют практически традиционных трансформаций неоколониализма.")


# дочерий класс личные данные(метод Наследования)
class NataP(Gruppa_222):

    def __init__(self,):
        print("Я Наташа! Тише едешь дальше будешь!")
        super().UK()  # (метод Наследования)

    def OOP2(self):
        print("Люблю готовить")
        super().UK1()

class PachaP(Gruppa_222):

    def __init__(self, ):
        super().UK()  # (метод Наследования)
        print("Я.Паша!Всегда готов!")

    def OOP2(self):
        print("Люблю писать код")
        super().UK1()
#Инкапсуляция — ограничение доступа к составляющим объект компонентам (методам и переменным).
# Инкапсуляция делает некоторые из компонент доступными только внутри класса.
    def _private(self):
        print("Никогда не расскажу секрет крестиков-ноликов!")


#(ПОЛИМОРФИЗМ)возможность обработки разных типов данных, т. е. принадлежащих к разным классам, с помощью "одной и той же" функции, или метода
Natacha=NataP()
Natacha.OOP2()
Natacha.OOP()
Pavel=PachaP()
Pavel.OOP2()
Pavel._private()

print("что делает перед экзаменом VladM?")

VladM=Gruppa_222()
VladM.OOP()

print("что будет делать  10 последующих дней VladU ?")
VladU=Gruppa_222()
VladU.UK()

print("что делает после экзамена Artem?")
Artem=Gruppa_222()
Artem.UK1()

print("Владик Д., расскажи нам, что ты выучил за неделю экзамена?")
VladD=Gruppa_222()
VladD.UK2()


